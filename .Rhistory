mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
j
rm(list=c(ls()))
load("SDP.Rdata")
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
rm(list=c(ls()))
load("SDP.Rdata")
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
xc
rep.gain
W.nr[[1]]
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
j
load("SDP.Rdata")
#Analysis of Decision matrices
#Ontogenetic analysis
dec.dist.list <- list()
for (j in 1:num.its) {
dec.dist <- list()
for (i in 1:(tmax-1)) {
istar.node <- do.call(cbind,lapply(istar.nr[[j]],function(x){x[,i]}))
dec.numeric <- as.numeric(istar.node)
dec.dist[[i]] <- dec.numeric[which(dec.numeric != 0)]
}
dec.dist.list[[j]] <- dec.dist
}
col.disc <- brewer.pal(5,"RdYlGn")
par(mfrow=c(1,2))
plot(unlist(lapply(dec.dist.list[[1]],mean)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching mean")
for (j in 2:5) {
lines(unlist(lapply(dec.dist.list[[j]],mean)),type="l",lwd=3,col=col.disc[j])
}
plot(unlist(lapply(dec.dist.list[[1]],sd)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching SD")
for (j in 2:5) {
lines(unlist(lapply(dec.dist.list[[j]],sd)),type="l",lwd=3,col=col.disc[j])
}
load("SDP.Rdata")
#Analysis of Decision matrices
#Ontogenetic analysis
dec.dist.list <- list()
for (j in 1:num.its) {
dec.dist <- list()
for (i in 1:(tmax-1)) {
istar.node <- do.call(cbind,lapply(istar.nr[[j]],function(x){x[,i]}))
dec.numeric <- as.numeric(istar.node)
dec.dist[[i]] <- dec.numeric[which(dec.numeric != 0)]
}
dec.dist.list[[j]] <- dec.dist
}
col.disc <- brewer.pal(5,"RdYlGn")
par(mfrow=c(1,2))
plot(unlist(lapply(dec.dist.list[[1]],mean)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching mean")
for (j in 2:5) {
lines(unlist(lapply(dec.dist.list[[j]],mean)),type="l",lwd=3,col=col.disc[j])
}
plot(unlist(lapply(dec.dist.list[[1]],sd)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching SD")
for (j in 2:5) {
lines(unlist(lapply(dec.dist.list[[j]],sd)),type="l",lwd=3,col=col.disc[j])
}
col.disc <- brewer.pal(5,"RdYlGn")
par(mfrow=c(1,2))
plot(unlist(lapply(dec.dist.list[[1]],mean)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching mean")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],mean)),type="l",lwd=3,col=col.disc[j])
}
plot(unlist(lapply(dec.dist.list[[1]],sd)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching SD")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],sd)),type="l",lwd=3,col=col.disc[j])
}
load("SDP.Rdata")
#Analysis of Decision matrices
#Ontogenetic analysis
dec.dist.list <- list()
for (j in 1:num.its) {
dec.dist <- list()
for (i in 1:(tmax-1)) {
istar.node <- do.call(cbind,lapply(istar.nr[[j]],function(x){x[,i]}))
dec.numeric <- as.numeric(istar.node)
dec.dist[[i]] <- dec.numeric[which(dec.numeric != 0)]
}
dec.dist.list[[j]] <- dec.dist
}
col.disc <- brewer.pal(5,"RdYlGn")
par(mfrow=c(1,2))
plot(unlist(lapply(dec.dist.list[[1]],mean)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching mean")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],mean)),type="l",lwd=3,col=col.disc[j])
}
plot(unlist(lapply(dec.dist.list[[1]],sd)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching SD")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],sd)),type="l",lwd=3,col=col.disc[j])
}
length(dec.dist.list)
j
rm(list=c(ls()))
library(RColorBrewer)
library(Rcpp)
library(igraph)
library(beanplot)
library(lattice)
library(emdbook)
source("src/filled_contour.r")
source("src/smooth_pal.R")
colors <- brewer.pal(5,"Spectral")
colors <- smooth_pal(colors, 5)
source("R/SDP_initialcond.R")
sourceCpp("src/SDP_single.cpp")
sourceCpp("src/SDP_single_foreq.cpp")
W.nr <- list()
istar.nr <- list()
cout.foreq <- list()
num.its <- 10
land.hetero <- seq(0,1,length.out=num.its)
for (j in 1:num.its) {
print(paste("j=",j,sep=""))
#Initial Conditions
Rout <- SDP_initialcond(
max.res.bs <- 2000,
num.res <- 15,
cons.bs <- 20,
tmax <- 500,
hab.het.var <- land.hetero[j],
max.enc <- 20,
learn.mag <- 0)
res.bs <- Rout[[1]]
xc <- Rout[[2]]
rep.gain <- Rout[[3]]
f.m <- Rout[[4]]
mort <- Rout[[5]]
dec.ls <- Rout[[6]]
rho.vec <- Rout[[7]]
c.learn <- Rout[[8]]
g.forage <- Rout[[9]]
c.forage <- Rout[[10]]
eta <- Rout[[11]]
#Run Backwards simulation
cout <- SDP_single(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage
)
W.nr[[j]] <- cout[[1]]
istar.nr[[j]] <- cout[[2]]
}
save.image(file="SDP.RData")
load("SDP.Rdata")
#Analysis of Decision matrices
#Ontogenetic analysis
dec.dist.list <- list()
for (j in 1:num.its) {
dec.dist <- list()
for (i in 1:(tmax-1)) {
istar.node <- do.call(cbind,lapply(istar.nr[[j]],function(x){x[,i]}))
dec.numeric <- as.numeric(istar.node)
dec.dist[[i]] <- dec.numeric[which(dec.numeric != 0)]
}
dec.dist.list[[j]] <- dec.dist
}
col.disc <- brewer.pal(5,"RdYlGn")
par(mfrow=c(1,2))
plot(unlist(lapply(dec.dist.list[[1]],mean)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching mean")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],mean)),type="l",lwd=3,col=col.disc[j])
}
plot(unlist(lapply(dec.dist.list[[1]],sd)),type="l",lwd=3,col=col.disc[1],
xlab="Time",ylab="Prey-switching SD")
for (j in 2:num.its) {
lines(unlist(lapply(dec.dist.list[[j]],sd)),type="l",lwd=3,col=col.disc[j])
}
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
rm(list=c(ls()))
load("SDP.Rdata")
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
rm(list=c(ls()))
library(RColorBrewer)
library(Rcpp)
library(igraph)
library(beanplot)
library(lattice)
library(emdbook)
source("src/filled_contour.r")
source("src/smooth_pal.R")
colors <- brewer.pal(5,"Spectral")
colors <- smooth_pal(colors, 5)
source("R/SDP_initialcond.R")
sourceCpp("src/SDP_single.cpp")
sourceCpp("src/SDP_single_foreq.cpp")
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
rm(list=c(ls()))
library(RColorBrewer)
library(Rcpp)
library(igraph)
library(beanplot)
library(lattice)
library(emdbook)
source("src/filled_contour.r")
source("src/smooth_pal.R")
colors <- brewer.pal(5,"Spectral")
colors <- smooth_pal(colors, 5)
source("R/SDP_initialcond.R")
sourceCpp("src/SDP_single.cpp")
sourceCpp("src/SDP_single_foreq.cpp")
W.nr <- list()
istar.nr <- list()
cout.foreq <- list()
num.its <- 10
land.hetero <- seq(0,1,length.out=num.its)
load("SDP.Rdata")
cout.foreq <- list()
for (j in 1:num.its) {
#####
#Starting values
N <- 20 #starting Num. of individuals
tsim <- 5000 #Simulation time
r.alpha <- 2 #Recruit density-independent growth rate
r.beta <- 1/100 #Recruit density-dependent growth rate
r.comp <- 1 #degree of compensation
cout.foreq[[j]] <- SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
}
x = SDP_single_foreq(
tmax = tmax,
res_bs = res.bs,
cons_bs = cons.bs,
xc = xc,
rep_gain = rep.gain,
f_m = f.m,
mort = mort,
dec_ls = dec.ls,
rho_vec = rho.vec,
c_learn = c.learn,
g_forage = g.forage,
c_forage = c.forage,
W_nr = W.nr[[j]],
istar_nr = istar.nr[[j]],
N_init = N,
tsim = tsim,
alpha = r.alpha,
beta = r.beta,
comp = r.comp
)
j
W.nr[[j]]
istar.nr[[j]]
land.hetero
tmax
res.bs
cons.bs
xc
rep.gain
